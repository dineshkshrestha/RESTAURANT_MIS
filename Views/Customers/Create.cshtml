@model RESTAURANT_MIS.Customers

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="content-header">
    <div class="container-fluid">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">List of all available restaurant tables</h3>
                <a class="btn btn-info fa-pull-right" href="/Customers/Create"><i class="fa fa-plus-square"></i> Add New Item</a>

            </div>
            <!-- /.card-header -->
            <div class="card-body">

                <form id="quickForm" action="/Customers/Create" novalidate method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>Customers</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Create" class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                </form>

                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>

            </div>
        </div>
    </div>
</div>


@section scripts{
    <script src="~/Scripts/jquery-validation/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery-validation/additional-methods.min.js"></script>
    <script>
        $(function () {
            $.validator.setDefaults({
                submitHandler: function () {
                    alert("Form successful submitted!");
                }
            });
            $('#quickForm').validate({
                rules: {
                    Name: {
                        required: true,

                    }, Email: {
                        required: true,
                        email: true,
                    },
                    PhoneNumber: {
                        required: true,
                        minlength: 10,
                        maxlength: 10
                    },
                    Address: {
                        required: true
                    },
                },
                messages: {
                    Email: {
                        required: "Please enter a email address",
                        email: "Please enter a valid email address"
                    }, Name: {
                        required: "Please enter a Name",
                    },
                    PhoneNumber: {
                        required: "Please provide a password",
                        minlength: "Phonenumber should be 10 digits",
                        maxlength: "Phonenumber should be 10 digits"
                    },

                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            });
        });
    </script>




}
